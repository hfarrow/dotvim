set nocompatible
let s:settings = {}

" TODO:
" Replace snipmate with utilsnip
" Replace nerdtree with vimfiler
" Retire fuzzyfinder in favour of unite (if searching and grepping issues are not a problem
" remove ctrlp?
" improve start up time. Lazy loading, command line args to remove plugin groups

"remap leader key
let mapleader = ','
let g:mapleader = ','

" {{{ Debug
    let s:settings.debug = 0
" }}}

" Versioning {{{
    let g:hfvim_version_major = 0
    let g:hfvim_version_minor = 0
    let g:hfvim_version_build = 0
" }}}

" Edit Settings {{{
    " Edit user vimrc
    map <Leader>te :e ~/.vimrc<cr>
    " Edit this file
    map <Leader>td :e ~/.vim/hfvimrc<cr>
" }}}

" Required Paths {{{
    function! EnsureExists(path) "{{{
        if !isdirectory(expand(a:path))
            call mkdir(expand(a:path))
        endif
    endfunction " }}}

    call EnsureExists('~/.vim/.cache')
" }}}

" hfvim settings {{{
    if !exists('g:hfvim_settings') || !exists('g:hfvim_settings.expected_major_version')
        echom 'The g:hfvim_settings and g:hfvim_settings.expected_major_version variables must be defined.'
        finish
    endif

    if g:hfvim_settings.expected_major_version != 0
        echom 'The version number in your config does not match the distribution version.'
        finish
    endif

    " initialize default settings
    let s:settings.default_indent = 4
    let s:settings.max_column = 120
    let s:settings.enable_cursorcolumn = 0
    let s:settings.autocomplete_method = 'ycm'

    let s:settings.plugin_groups = []
    call add(s:settings.plugin_groups, 'core')
    call add(s:settings.plugin_groups, 'cpp')
    call add(s:settings.plugin_groups, 'actionscript')
    call add(s:settings.plugin_groups, 'haxe')
    call add(s:settings.plugin_groups, 'javascript')
    call add(s:settings.plugin_groups, 'scm')
    call add(s:settings.plugin_groups, 'editing')
    call add(s:settings.plugin_groups, 'visual')
    call add(s:settings.plugin_groups, 'indents')
    call add(s:settings.plugin_groups, 'navigation')
    call add(s:settings.plugin_groups, 'unite')
    call add(s:settings.plugin_groups, 'autocomplete')
    call add(s:settings.plugin_groups, 'misc')

    " exclude all language-specific plugins by default
    if !exists('g:hfvim_settings.plugin_groups_excluded')
        let g:hfvim_settings.plugin_groups_excluded = ['cpp', 'actionscript', 'haxe']
    endif

    for group in g:hfvim_settings.plugin_groups_excluded
        let i = index(s:settings.plugin_groups, group)
        if i != -1
            call remove(s:settings.plugin_groups, i)
        endif
    endfor

    if exists('g:hfvim_settings.plugin_groups_included')
        for group in g:hfvim_settings.plugin_groups_included
            call add(s:settings.plugin_groups, group)
        endfor
    endif

    if exists('g:hfvim_settings.disable_all_plugins') && g:hfvim_settings.disable_all_plugins == 1
        let s:settings.plugin_groups = []
    endif

    if s:settings.debug == 1
        if exists('g:hfvim_settings.disable_all_plugins') && g:hfvim_settings.disable_all_plugins == 1
            echo "hfvim disable all plugins is true"
        else
            echo "hfvim included plugin groups: " s:settings.plugin_groups
        endif
    endif

    " override defaults with the ones specified in g:hfvim_settings
    for key in keys(s:settings)
        if has_key(g:hfvim_settings, key)
            let s:settings[key] = g:hfvim_settings[key]
        endif
    endfor
"}}}

" Neobundle Configuration {{{
    if has('vim_starting')
        set runtimepath+=~/.vim/bundle/neobundle.vim/
    endif

    call neobundle#rc(expand('~/.vim/bundle/'))

    " Let NeoBundle manage NeoBundle
    NeoBundleFetch 'Shougo/neobundle.vim'

" Plugin / Bundle Configuration
    if count(s:settings.plugin_groups, 'core') " {{{
        NeoBundle 'flazz/vim-colorschemes'
        NeoBundle "MarcWeber/vim-addon-mw-utils"
        NeoBundle "tomtom/tlib_vim",
        NeoBundle "vim-scripts/L9"
        NeoBundle 'Shougo/vimproc.vim',
            \ {'name' : 'vimproc',
            \  'build' :
            \   {
            \       'unix' : 'make -f make_unix.mak',
            \       'mac' : 'make -f make_mac.mak',
            \       'cygwin' : 'make -f make_cygwin.mak',
            \       'windows' : 'make -f make_mingw32.mak'
            \   }
            \ }
        NeoBundle 'Lokaltog/powerline', " {{{
            "set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim
            "set laststatus=2
        " }}}
        NeoBundle 'bling/vim-airline' " {{{
            let g:airline_powerline_fonts=1
            set laststatus=2
        " }}}
        NeoBundle 'vim-scripts/localvimrc' " {{{
           let g:localvimrc_sandbox = 0
           let g:localvimrc_persistent = 1
           let g:localvimrc_name = ".lvimrc"
        " }}}
    endif " }}}

    if count(s:settings.plugin_groups, 'cpp') "{{{
        NeoBundleLazy 'vim-scripts/a.vim', {'autoload' : {'filetypes' : ['cpp']}} " {{{
        NeoBundleLazy 'octol/vim-cpp-enhanced-highlight', {'autoload' : {'filetypes' : ['cpp']}}
        " }}}
    endif " }}}

    if count(s:settings.plugin_groups, 'actionscript') "{{{
        NeoBundleLazy 'jeroenbourgois/vim-actionscript', {'autoload' : {'filetypes' : ['actionscript']}} " {{{
        " }}}
    endif " }}}

    if count(s:settings.plugin_groups, 'haxe') "{{{
        NeoBundleLazy 'jdonaldson/vaxe', {'autoload' : {'filetypes' : ['haxe']}} " {{{
            set autowrite
        " }}}
    endif " }}}

    if count(s:settings.plugin_groups, 'javascript') "{{{
        NeoBundleLazy 'jelera/vim-javascript-syntax', {'autoload' : {'filetypes' : ['javascript']}} " {{{
        " }}}
    endif " }}}

    if count(s:settings.plugin_groups, 'scm') "{{{
        NeoBundle 'tpope/vim-fugitive', {'augroup' : 'fugitive'} " {{{
            map <Leader>gd :Gdiff<cr>
            map <Leader>gq :diffoff!<cr> <C-h> :close<cr>
            map <Leader>gs :Gstatus<cr>
            map <Leader>gc :Gcommit<cr>
            map <Leader>gb :Gblame<cr>
            map <Leader>gl :Glog<cr>
            map <Leader>gg :Git checkout<cr>
            map <Leader>gvr :Git svn rebase<cr>
            map <Leader>gvc :Git svn dcommit<cr>
            map <Leader>gk :Git checkout .
            map <Leader>gve :Git stash<cr> :Git svn rebase<cr> :Git stash pop<cr> 
        " }}}
    endif " }}}

    if count(s:settings.plugin_groups, 'editing') "{{{
        NeoBundle 'Raimondi/delimitMate' " {{{
           "let delimitMate_autoclose = 0
           "let delimitMate_expand_cr = 1
        " }}}
        NeoBundle 'vim-scripts/tComment' " {{{
            map <Leader>c <c-_><c-_>
        " }}}
    endif " }}}

    if count(s:settings.plugin_groups, 'visual') "{{{
       NeoBundle 'Lokaltog/vim-easymotion' "{{{
           " let g:EasyMotion_leader_key = '<Leader>' 
       " }}}
    endif " }}}

    if count(s:settings.plugin_groups, 'indents') "{{{
    endif " }}}

    if count(s:settings.plugin_groups, 'navigation') "{{{
        NeoBundle 'scrooloose/nerdtree', {'augroup' : 'NERDTreeHijackNetrw'} "{{{
            let g:NERDTreeChristmasTree=1
            nnoremap <leader>nt :NERDTreeToggle<cr>
            nnoremap <leader>nf :NERDTreeFind<cr>
        " }}}
        NeoBundle 'kien/ctrlp.vim' " {{{
            nnoremap <A-p> :CtrlPMRU<cr>
            call EnsureExists('~/.vim/.cache/ctrlp')
            let g:ctrlp_cache_dir = $HOME.'/.vim/.cache/ctrlp'
        " }}}
        NeoBundle 'vim-scripts/taglist.vim' "{{{
			let tlist_actionscript_settings = 'actionscript;c:class;f:method;p:property;v:variable'
            let tlist_lua_settings = 'lua;c:constant;C:command;t:trigger;f:function'
            let tlist_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .
                                   \ 'c:class;g:enum;s:struct;u:union;f:function;p:prototype'
            let tlist_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .
                                       \ 'v:variable;f:function;p:prototype'
			let Tlist_Use_Right_Window = 1
			let Tlist_Show_One_File = 1
			let Tlist_Display_Tag_Scope = 1
			let Tlist_Enable_Fold_Column = 0
			map <leader>l :TlistToggle<CR>
		"}}}
    endif " }}}

    if count(s:settings.plugin_groups, "unite") "{{{
        NeoBundle 'Shougo/unite.vim' " {{{
            " First time user will not have installed unite.vim yet so they will
            " get an error before the plugins have been installed.
            " Solution: Move all plugin configs to after NeoBundleCheck
            if neobundle#is_installed('unite.vim')
                call unite#filters#matcher_default#use(['matcher_fuzzy'])
                call unite#filters#sorter_default#use(['sorter_rank'])
                call unite#set_profile('files', 'smartcase', 1)
                call unite#custom#source('line,outline', 'matchers', 'matcher_fuzzy')
            endif

            call EnsureExists('~/.vim/.cache/unite')
            let g:unite_data_directory='~/.vim/.cache/unite'
            "let g:unite_enable_start_insert=1
            let g:unite_source_history_yank_enable=1
            let g:unite_source_rec_max_cache_files=50000
            let g:unite_source_find_max_candidates=20000
            let g:unite_source_grep_max_candidates=20000
            let g:unite_prompt='Â» '

            if executable('ag')
                let g:unite_source_grep_command='ag'
                let g:unite_source_grep_default_opts='--nocolor --nogroup -S -C0'
                let g:unite_source_grep_recursive_opt=''
            elseif executable('ack')
                let g:unite_source_grep_command='ack'
                let g:unite_source_grep_default_opts='--no-heading --no-color -k -C0'
                let g:unite_source_grep_recursive_opt=''
            endif

            nmap <space> [unite]
            nnoremap [unite] <nop>

            nnoremap <silent> [unite]u :<C-u>Unite -toggle -start-insert<cr><c-u>
            nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize -buffer-name=mixed file_rec/async buffer file_mru bookmark<cr><c-u>
            nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec/async<cr><c-u>
            nnoremap <silent> [unite]e :<C-u>Unite -toggle -auto-resize -buffer-name=mru file_mru<cr><c-u>
            nnoremap <silent> [unite]r :<C-u>Unite -toggle -auto-resize -buffer-name=mru file_mru<cr><c-u>
            nnoremap <silent> [unite]y :<C-u>Unite -toggle -auto-resize -buffer-name=yanks history/yank<cr>
            nnoremap <silent> [unite]l :<C-u>Unite -toggle -auto-resize -buffer-name=line line<cr>
            nnoremap <silent> [unite]b :<C-u>Unite -toggle -auto-resize -buffer-name=buffers buffer<cr>
            nnoremap <silent> [unite]/ :<C-u>Unite -toggle -auto-resize -no-quit -buffer-name=search grep:.<cr>
            nnoremap <silent> [unite]z :<C-u>Unite -toggle -auto-resize -buffer-name=mappings mapping<cr>
            nnoremap <silent> [unite]o :<C-u>Unite -toggle -auto-resize -buffer-name=outline outline<cr>
            nnoremap <silent> [unite]s :<C-u>Unite -toggle -auto-resize -quick-match buffer<cr>
            nnoremap <silent> [unite]m :<C-u>Unite -toggle -auto-resize -buffer-name=bookmarks bookmark<cr>
            nnoremap <silent> [unite]M :<C-u>UniteBookmarkAdd<cr><cr>
            " Search for word under cursor
            nmap <silent> [unite]w [unite]/<C-r><C-w><cr>

            map <C-F11> <Plug>(unite_redraw)
        " }}}
        " {{{ Unite Plugins
            NeoBundle 'Shougo/neomru.vim'
            NeoBundle 'Shougo/unite-outline'
            NeoBundle 'Shougo/unite-session'
            NeoBundle 'Shougo/vimfiler.vim'
            nnoremap <silent> [unite]t :<C-u>VimFilerExplorer<CR>
            nnoremap <silent> [unite]T :<C-u>VimFiler<CR>
            let g:vimfiler_as_default_explorer = 1
            NeoBundle 'Shougo/unite-help'
            nnoremap <silent> [unite]h :<C-u>Unite -start-insert help<CR>
            nnoremap <silent> [unite]H :<C-u><C-u>UniteWithCursorWord help<CR>
        " }}}
    endif " }}}

    if count(s:settings.plugin_groups, "autocomplete") "{{{
        NeoBundle 'Valloric/YouCompleteMe', " {{{
            \ {'build' :
            \   {
            \       'unix' : './install.sh --clang-completer',
            \       'mac' : './install.sh --clang-completer',
            \       'cygwin' : './install.sh --clang-completer',
            \       'windows' : './install.sh --clang-completer'
            \   }
            \ }
            nnoremap <space>je :YcmCompleter GoToDefinitionElseDeclaration<CR>
            nnoremap <space>jd :YcmCompleter GoToDefinition<CR>
            nnoremap <space>jD :YcmCompleter GoToDeclaration<CR>
            " If you prefer the Omni-Completion tip window to close when a selection is
            " made, these lines close it on movement in insert mode or when leaving
            " insert mode
            autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
            autocmd InsertLeave * if pumvisible() == 0|pclose|endif
        " }}}
        NeoBundle 'scrooloose/syntastic'
        NeoBundle 'garbas/vim-snipmate' " {{{
            imap <C-s> <esc>a<Plug>snipMateNextOrTrigger
            smap <C-s> <Plug>snipMateNextOrTrigger
        " }}}
        NeoBundle 'honza/vim-snippets'
    endif " }}}

    if count(s:settings.plugin_groups, "misc") "{{{
        NeoBundle 'mileszs/ack.vim' " {{{
            nnoremap <Leader>w :Ack!<C-r><C-w><cr>
            nnoremap <Leader>/ :Ack!
        " }}}
        NeoBundle 'Shougo/vimshell.vim'
    endif " }}}

    " finish loading {{{
    if exists('g:dotvim_settings.disabled_plugins')
        for plugin in g:dotvim_settings.disabled_plugins
            exec 'NeoBundleDisable '.plugin
        endfor
    endif

    filetype plugin indent on

    NeoBundleCheck

    if !has('vim_starting')
        " Call on_source hook when reloading .vimrc.
        call neobundle#call_hook('on_source')
    endif
    " }}}
" }}}

" Base Config {{{
" Autocmd {{{
    "autocmd FileType css,scss setlocal foldmethod=marker foldmarker={,}
    autocmd FileType css,scss nnoremap <silent> <leader>S vi{:sort<cr>
    "autocmd FileType python setlocal foldmethod=indent
    "autocmd FileType markdown setlocal nolist
    "autocmd FileType vim setlocal fdm=marker keywordprg=:help

    autocmd BufRead * normal zR
" }}}

" Functions {{{
    function! CloseWindowOrKillBuffer() " {{{
        let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

        " never bdelete a nerd tree
        if matchstr(expand("%"), 'NERD') == 'NERD'
            wincmd c
            return
        endif

        if number_of_windows_to_this_buffer > 1
            wincmd c
        else
            bdelete
        endif
    endfunction " }}}
" }}}

" Mappings {{{
    " Leave insert mode
    inoremap jj <esc>
    inoremap jk <esc>
    inoremap kj <esc>

    " Change cursor position in insert mode
    inoremap <C-h> <left>
    inoremap <C-l> <right>
    inoremap <C-j> <down>
    inoremap <C-k> <up>

    " Auto center
    nnoremap <silent> n nzz
    nnoremap <silent> N Nzz
    nnoremap <silent> * *zz
    nnoremap <silent> # #zz
    nnoremap <silent> g* g*zz
    nnoremap <silent> g# g#zz
    nnoremap <silent> <C-o> <C-o>zz
    nnoremap <silent> <C-i> <C-i>zz

    " reselect visual block after indent
    vnoremap < <gv
    vnoremap > >gv

    " reselect last paste
    nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

    " shortcuts for windows
    nnoremap <leader>v <C-w>v<C-w>l
    nnoremap <leader>s <C-w>s
    nnoremap <C-h> <C-w>h
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-l> <C-w>l

    " clear highlight
    nnoremap <cr> :set hlsearch! hlsearch?<cr>

    " S = Stamp replace word with last yanked text
    nnoremap S diw"0P

    " copy / paste from clipboard
    vnoremap <C-c> "+y
    nnoremap <C-x> "+gP

    " Replace Word Under Cursor
    nnoremap <space>c :%s/\<<C-r><C-w>\>//g<Left><Left>
    " Replace selected text in all files
    vnoremap <space>a "hy:!ack -l '<C-r>h' \| xargs perl -pi -E 's/<C-r>h/<C-r>h/g'<Left><Left><Left>

    " make Y consistent with C and D. See :help Y.
    nnoremap Y y$

    " Alt-j insert line below, Alt-k insert line above
    " Alt-J delete line below, Alt-K delte live above
    nnoremap <silent><A-J> m`:silent +g/\m^\s*$/d<CR>``:noh<CR>
    nnoremap <silent><A-K> m`:silent -g/\m^\s*$/d<CR>``:noh<CR>
    nnoremap <silent><A-j> :set paste<CR>m`o<Esc>``:set nopaste<CR>
    nnoremap <silent><A-k> :set paste<CR>m`O<Esc>``:set nopaste<CR>

    " Window killer
    nnoremap <silent> Q :call CloseWindowOrKillBuffer()<cr>

    " Neobundle Upddate
    nnoremap <leader>nbu :Unite neobundle/update -vertical -no-start-insert<cr>
    
    " Generate ctags
    map <C-F12> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
" }}}

" Editor {{{
" Color Schemes {{{
    " turn syntax highlighting on
    set t_Co=256
    syntax on
    set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Bold\ 8
    "set guifont=Ubuntu\ Mono\ derivative\ Powerline\ Bold\ 9.5

    "colorscheme slate
    "colorscheme slate2
    "colorscheme BusyBee
    "colorscheme darkrobot
    "colorscheme jellybeans
    "colorscheme kib_darktango
    "colorscheme native
    "colorscheme no_quater
    "colorscheme paintbox
    "colorscheme refactor
    "colorscheme symfony
    "colorscheme two2tango
    colorscheme wombat256
" }}}

" Encoding {{{
    " set UTF8 encoding
    set enc=utf-8
    set fenc=utf-8
    set termencoding=utf-8
" }}}

" Insert Mode {{{
    " Allow backspace to always delete to left of cursor.
    set backspace=2
    set backspace=indent,eol,start

" }}}

" Searching {{{
    set hlsearch                            "Highlight searches
    set incsearch                           "incremental searching
    set ignorecase                          "ignore case for searching
    set smartcase                           "do case-sensitive if there's a capital letter

    if executable('ack')
        set grepprg=ack\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow\ $*
        set grepformat=%f:%l:%c:%m
    endif
    if executable('ag')
        set grepprg=ag\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow
        set grepformat=%f:%l:%c:%m
    endif 
" }}}

" Misc {{{
    set number                              "line numbers
    set showmatch                           "highlight matching braces
    set comments=sl:/*,mb:\ *,elx:\ */      "intelligent comments
    "set textwidth=160                       "wrap lines at 120 chars. 
    set mouse=a                             "enable mouse
    set history=1000                        "number of command lines to remember
    set ttyfast                             "assume fast terminal connection
    "set showcmd                             "show information in last line of editor
    "set foldenable                          "enable folds by default
    "set foldmethod=syntax                   "fold via syntax of files
    "set foldlevelstart=99                   "open all folds by default
    set nofoldenable
    "let g:xml_syntax_folding=1              "enable xml folding
" }}}

" Tabs {{{
    set autoindent                          "use indentation of previous line"
    set smartindent                         "use intelligent indentation
    
    " configure tabwidth and insert spaces instead of tabs
    set tabstop=4                           "tab width is 4 spaces
    set shiftwidth=4                        "indent also with 4 spaces
    set expandtab                           "expand tabs to spaces
    set softtabstop=4
" }}}

" Pyclewn {{{

    function! StartPyclewn(executablePath, executableName, launchTerminal)
        exec 'cd ' . a:executablePath
        exec 'Pyclewn'
        if a:launchTerminal
            exec 'Cinferiortty'
        endif
        if strlen(a:executablePath)
            exec 'Cfile ' . a:executablePath . '/' . a:executableName
        endif
        set ballooneval
        exec 'cd -'
    endfunction

    function! QuitPyclewn()
        exec 'nbclose'
    endfunction

    " Something keeps turning ballooneval off so set it everytime we do anything
    let g:pyclewn_args="--terminal=gnome-terminal,-x"
    nnoremap <F8> :Crun<CR>:set ballooneval<CR>
    nnoremap <S-F8> :Ckill<CR>:set ballooneval<CR>
    nnoremap <F9> :Ccontinue<CR>:set ballooneval<CR>
    nnoremap <F10> :Cnext<CR>:set ballooneval<CR>
    nnoremap <F11> :Cstep<CR>:set ballooneval<CR>
    nnoremap <S-F11> :Cfinish<CR>:set ballooneval<CR>
    nnoremap <F12> :call StartPyclewn("", 0)<CR>:set ballooneval<CR>
    nnoremap <S-F12> :call QuitPyclewn()<CR>:set ballooneval<CR>

    nnoremap <Leader>za :Cinfo args<CR>:set ballooneval<CR>
    nnoremap <Leader>zl :Cinfo locals<CR>:set ballooneval<CR>
    nnoremap <Leader>zb :Cinfo breakpoints<CR>:set ballooneval<CR>
    nnoremap <Leader>zu :Cup<CR>:set ballooneval<CR>
    nnoremap <Leader>zd :Cdown<CR>:set ballooneval<CR>
    nnoremap <Leader>zk :exe "Cbreak %:p:" . line(".")<CR>:set ballooneval<CR>
    nnoremap <Leader>zK :exe "Cclear %:p:" . line(".")<CR>:set ballooneval<CR>
    nnoremap <Leader>zw :Cwhere<CR>:set ballooneval<CR>
" }}}

" Tags {{{
    set showfulltag                         "show entire tag when completing from tags
    set tags+=~/.vim/dependencies/tags/cpp
    set tags+=~/.vim/dependencies/tags/sdl2
" }}}

" vim file/folder management {{{
    " persistent viminfo
    if has('viminfo')
        set vi^=!
    endif
    
    " persistent undo
    if exists('+undofile')
        set undofile
        set undodir=~/.vim/.cache/undo
    endif

    " backups
    set backup
    set backupdir=~/.vim/.cache/backup

    " swap files
    set directory=~/.vim/.cache/swap
    set noswapfile

    call EnsureExists(&undodir)
    call EnsureExists(&backupdir)
    call EnsureExists(&directory)
" }}}
" }}}
" }}}
