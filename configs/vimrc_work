" ==========================================================
" Define hfvim user settings before sourcing hfvimrc
" ==========================================================
" hfvim config {{{
    let g:hfvim_settings = {}
    let g:hfvim_settings.expected_major_version = 0
    "let g:hfvim_settings.plugin_groups_excluded = []
    let g:hfvim_settings.plugin_groups_included = ['actionscript']
    let g:hfvim_settings.disabled_plugins = []

    " not supported yet
    " let g:hfvim_settings.user_plugins = []

    " ==========================================================
    " Source hfvim to initialize the distrobution
    " ==========================================================
    so ~/.vim/hfvimrc
" }}}

" ==========================================================
" User config below here
" ==========================================================

filetype off
call pathogen#infect('custom_bundle/{}')
call pathogen#helptags()
filetype on

" Conversions
map <Leader>cu :e ++ff=mac<CR> :set ff=unix<CR> :w<CR>
map <Leader>cm :e ++ff=unix<CR> :set ff=mac<CR> :w<CR>
map <Leader>cd :e ++ff=dos<CR> :set ff=unix<CR> :w<CR>

" Python
map <Leader>jf :%!python -m json.tool<CR>

" FuzzyFinder keybindings
let g:fuf_modesDisable = []

function! OpenFile() 
    if stridx(bufname("%"),"NERD_tree") >= 0 
       :wincmd w 
    endif 
    :FufFileWithFullCwd **/
endfunction 
noremap <silent> <Leader>tt :call OpenFile()<CR>

function! OpenBuffer() 
    if stridx(bufname("%"),"NERD_tree") >= 0 
       :wincmd w 
    endif 
    :FufBuffer
endfunction 
noremap <silent> <Leader>tb :call OpenBuffer()<CR>

function! OpenMruFile()
	if stridx(bufname("%"), "NERD_tree") >= 0
		:wincmd w
	endif
	:FufMruFileInCwd **/
endfunction
noremap <silent> <Leader>tr :call OpenMruFile()<CR>

noremap <silent> <Leader>tw :FufFileWithFullCwd **/<C-r><C-w><CR>

nnoremap <space>w :Ack!<C-r><C-w><cr>
nnoremap <space>/ :Ack!

call EnsureExists('~/.vim/.cache/fuf-data')
let g:fuf_dataDir = '~/.vim/.cache/fuf-data'
